services:
  frontend:
    image: frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        PUBLIC_STRIPE_KEY: pk_test_51J4
    ports:
        - "3000:3000"
    networks:
      - backend
    depends_on:
      - traefik

  traefik:
    image: traefik:v2.10
    command:
      - "--configFile=/etc/traefik/traefik.yml"
      - "--providers.docker=true"
      - "--providers.file.filename=/etc/traefik/traefik.yml"
    ports:
      - "8080:8080"
    volumes:
      - "./traefik.yml:/etc/traefik/traefik.yml"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - backend

  config-service:
    image: config-service:latest
    build:
      context: ./config
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      SERVER_PORT: 8888
      SPRING_APPLICATION_NAME: config-service
      SPRING_CLOUD_CONFIG_SERVER_GIT_URI: https://github.com/robinlafontaine/ecommerce-config.git
    healthcheck:
        test: "curl --fail --silent localhost:8888/actuator/health | grep UP || exit 1"
        interval: 10s
        timeout: 5s
        retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.config.entrypoints=web"
      - "traefik.http.services.config.loadbalancer.server.port=8888"
      - "traefik.http.routers.config.middlewares="

  auth-service:
    image: auth-service:latest
    build:
      context: ./auth
      dockerfile: Dockerfile
    networks:
      - backend
#    deploy:    # Uncomment to deploy in swarm mode
#      replicas: 2
    depends_on:
      config-service:
        condition: service_healthy
      auth-postgres:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    environment:
      SERVER_PORT: 8082
      SPRING_APPLICATION_NAME: auth-service
      SPRING_CONFIG_IMPORT: configserver:http://config-service:8888
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.auth-authenticate.entrypoints=web"
      - "traefik.http.routers.auth-authenticate.rule=Path(`/auth/authenticate`) && !Method(`OPTIONS`)"
      - "traefik.http.routers.auth-authenticate.middlewares="

      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.routers.auth.rule=PathPrefix(`/auth`) && !Path(`/auth/authenticate`) && !Method(`OPTIONS`)"
      - "traefik.http.routers.auth.middlewares=jwt-auth@file"

      - "traefik.http.routers.preflight-auth.rule=PathPrefix(`/auth`) && Method(`OPTIONS`)"
      - "traefik.http.routers.preflight-auth.entrypoints=web"
      - "traefik.http.routers.preflight-auth.middlewares=cors@file"
      - "traefik.http.routers.preflight-auth.service=noop@internal"


  inventory-service:
    image: inventory-service:latest
    build:
      context: ./inventory
      dockerfile: Dockerfile
    networks:
      - backend
    volumes:
      - ./images:/images
    depends_on:
      config-service:
        condition: service_healthy
      inventory-postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      SERVER_PORT: 8083
      SPRING_APPLICATION_NAME: inventory-service
      SPRING_CONFIG_IMPORT: configserver:http://config-service:8888
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.inventory.entrypoints=web"
      - "traefik.http.routers.inventory.rule=PathPrefix(`/inventory`) && !Method(`OPTIONS`)"
      - "traefik.http.routers.inventory.middlewares=jwt-auth@file"
      - "traefik.http.routers.preflight-inventory.rule=PathPrefix(`/inventory`) && Method(`OPTIONS`)"
      - "traefik.http.routers.preflight-inventory.entrypoints=web"
      - "traefik.http.routers.preflight-inventory.middlewares=cors@file"
      - "traefik.http.routers.preflight-inventory.service=noop@internal"

  payment-service:
    image: payment-service:latest
    build:
      context: ./payment
      dockerfile: Dockerfile
    networks:
      - backend
    depends_on:
      config-service:
        condition: service_healthy
      payment-postgres:
        condition: service_healthy
    environment:
      SERVER_PORT: 8084
      SPRING_APPLICATION_NAME: payment-service
      SPRING_CONFIG_IMPORT: configserver:http://config-service:8888
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.payment.entrypoints=web"
      - "traefik.http.routers.payment.rule=PathPrefix(`/payments`) && !Method(`OPTIONS`)"
      - "traefik.http.routers.payment.middlewares=jwt-auth@file"
      - "traefik.http.routers.preflight-payment.rule=PathPrefix(`/payments`) && Method(`OPTIONS`)"
      - "traefik.http.routers.preflight-payment.entrypoints=web"
      - "traefik.http.routers.preflight-payment.middlewares=cors@file"
      - "traefik.http.routers.preflight-payment.service=noop@internal"

  order-service:
    image: order-service:latest
    build:
      context: ./order
      dockerfile: Dockerfile
    networks:
      - backend
    depends_on:
      config-service:
        condition: service_healthy
      order-postgres:
        condition: service_healthy
    environment:
      SERVER_PORT: 8085
      SPRING_APPLICATION_NAME: order-service
      SPRING_CONFIG_IMPORT: configserver:http://config-service:8888
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.order.entrypoints=web"
      - "traefik.http.routers.order.rule=PathPrefix(`/orders`) && !Method(`OPTIONS`)"
      - "traefik.http.routers.order.middlewares=jwt-auth@file"
      - "traefik.http.routers.preflight-order.rule=PathPrefix(`/orders`) && Method(`OPTIONS`)"
      - "traefik.http.routers.preflight-order.entrypoints=web"
      - "traefik.http.routers.preflight-order.middlewares=cors@file"
      - "traefik.http.routers.preflight-order.service=noop@internal"

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_DEFAULT_BUCKETS: image_bucket
    command: server --address ':9000' --console-address ':9001' /data
    volumes:
      - ./minio/data:/data
      - ./minio/config:/root/.minio
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://minio:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.entrypoints=web"
      - "traefik.http.routers.minio.rule=PathPrefix(`/product-images`)"
      - "traefik.http.routers.minio.middlewares="
      - "traefik.http.routers.preflight-minio.rule=PathPrefix(`/product-images`) && Method(`OPTIONS`)"
      - "traefik.http.routers.preflight-minio.entrypoints=web"
      - "traefik.http.routers.preflight-minio.middlewares=cors@file"
      - "traefik.http.routers.preflight-minio.service=noop@internal"

  zipkin:
    image: openzipkin/zipkin
    networks:
        - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.zipkin.entrypoints=web"
      - "traefik.http.routers.zipkin.rule=PathPrefix(`/zipkin`) && !Method(`OPTIONS`)"
      - "traefik.http.routers.zipkin.middlewares=jwt-auth@file"
      - "traefik.http.routers.preflight-zipkin.rule=PathPrefix(`/zipkin`) && Method(`OPTIONS`)"
      - "traefik.http.routers.preflight-zipkin.entrypoints=web"
      - "traefik.http.routers.preflight-zipkin.middlewares=cors@file"
      - "traefik.http.routers.preflight-zipkin.service=noop@internal"

  auth-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    networks:
      - backend
    volumes:
      - ./databases/auth/pgdata:/var/lib/postgresql/data
      - ./databases/scripts/auth_init.sql:/docker-entrypoint-initdb.d/initdb.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=auth_db --username=postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  inventory-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    networks:
      - backend
    volumes:
      - ./databases/inventory/pgdata:/var/lib/postgresql/data
      - ./databases/scripts/inventory_init.sql:/docker-entrypoint-initdb.d/initdb.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=inventory_db --username=postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  payment-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: payment_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    networks:
      - backend
    volumes:
      - ./databases/payment/pgdata:/var/lib/postgresql/data
      - ./databases/scripts/payment_init.sql:/docker-entrypoint-initdb.d/initdb.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=payment_db --username=postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  order-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    networks:
      - backend
    volumes:
      - ./databases/order/pgdata:/var/lib/postgresql/data
      - ./databases/scripts/order_init.sql:/docker-entrypoint-initdb.d/initdb.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=order_db --username=postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  backend:
    driver: bridge



