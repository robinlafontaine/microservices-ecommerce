services:
  traefik:
    image: traefik:v2.10
    command:
      - "--providers.docker=true"
      - "--entrypoints.web.address=:8080"
      - "--tracing.zipkin.httpEndpoint=http://zipkin:9411/api/v2/spans"
      - "--accessLog=true"
      - "--log.level=DEBUG"
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - backend

  auth-service:
    image: auth-service:latest
    build:
      context: ./auth
      dockerfile: Dockerfile
    networks:
      - backend
    ports:
        - "8082:8082"
    depends_on:
      auth-postgres:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    environment:
      SERVER_PORT: 8082
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-postgres:5432/auth_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_SLEUTH_SAMPLER_PROBABILITY: 1.0

    labels:
      # Enable Traefik for the auth-service
      - "traefik.enable=true"

      # Router for public endpoint (/auth/authenticate)
      - "traefik.http.routers.unprotected.rule=Path(`/auth/authenticate`)"
      - "traefik.http.routers.unprotected.entrypoints=web"
      - "traefik.http.routers.unprotected.service=unprotected"
      - "traefik.http.services.unprotected.loadbalancer.server.port=8082"
      - "traefik.http.routers.unprotected.middlewares="

      # Router for secured endpoints (/auth/validate and other protected routes)
      - "traefik.http.routers.auth.rule=PathPrefix(`/auth`)"
      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.routers.auth.service=auth"
      - "traefik.http.services.auth.loadbalancer.server.port=8082"
      - "traefik.http.routers.auth.middlewares=jwt-auth"

      # Middleware for JWT validation
      - "traefik.http.middlewares.jwt-auth.forwardauth.address=http://auth-service:8082/auth/validate"
      - "traefik.http.middlewares.jwt-auth.forwardauth.authRequestHeaders=Authorization, X-Forwarded-Uri"
      - "traefik.http.middlewares.jwt-auth.forwardauth.trustforwardheader=true"

  inventory-service:
    image: inventory-service:latest
    build:
      context: ./inventory
      dockerfile: Dockerfile
    networks:
      - backend
    volumes:
      - ./images:/images
    depends_on:
      inventory-postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      SERVER_PORT: 8083
      SPRING_DATASOURCE_URL: jdbc:postgresql://inventory-postgres:5432/inventory_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_SLEUTH_SAMPLER_PROBABILITY: 1.0
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: product-images
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.inventory.entrypoints=web"
      - "traefik.http.routers.inventory.rule=PathPrefix(`/inventory`)"
      - "traefik.http.services.inventory.loadbalancer.server.port=8083"
      - "traefik.http.routers.inventory.middlewares=jwt-auth"

      # Middleware for JWT validation
      - "traefik.http.middlewares.jwt-auth.forwardauth.address=http://auth-service:8082/auth/validate"
      - "traefik.http.middlewares.jwt-auth.forwardauth.authRequestHeaders=Authorization, X-Forwarded-Uri"
      - "traefik.http.middlewares.jwt-auth.forwardauth.trustforwardheader=true"

  payment-service:
    image: payment-service:latest
    build:
      context: ./payment
      dockerfile: Dockerfile
    networks:
      - backend
    depends_on:
      payment-postgres:
        condition: service_healthy
    environment:
      SERVER_PORT: 8084
      SPRING_DATASOURCE_URL: jdbc:postgresql://payment-postgres:5432/payment_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_SLEUTH_SAMPLER_PROBABILITY: 1.0
      STRIPE_API_KEY: sk_test_4eC39HqLyjWDarjtT1zdp7dc
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.payment.entrypoints=web"
      - "traefik.http.routers.payment.rule=PathPrefix(`/payments`)"
      - "traefik.http.services.payment.loadbalancer.server.port=8084"
      - "traefik.http.routers.payment.middlewares=jwt-auth"

      # Middleware for JWT validation
      - "traefik.http.middlewares.jwt-auth.forwardauth.address=http://auth-service:8082/auth/validate"
      - "traefik.http.middlewares.jwt-auth.forwardauth.authRequestHeaders=Authorization, X-Forwarded-Uri"
      - "traefik.http.middlewares.jwt-auth.forwardauth.trustforwardheader=true"

  order-service:
    image: order-service:latest
    build:
      context: ./order
      dockerfile: Dockerfile
    networks:
      - backend
    depends_on:
      order-postgres:
        condition: service_healthy
    environment:
      SERVER_PORT: 8085
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-postgres:5432/order_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      MANAGEMENT.ZIPKIN.TRACING.ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_SLEUTH_SAMPLER_PROBABILITY: 1.0
      INVENTORY_SERVICE_URL: http://inventory-service:8083
      PAYMENT_SERVICE_URL: http://payment-service:8084
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.order.entrypoints=web"
      - "traefik.http.routers.order.rule=PathPrefix(`/orders`)"
      - "traefik.http.services.order.loadbalancer.server.port=8085"
      - "traefik.http.routers.order.middlewares=jwt-auth"

      # Middleware for JWT validation
      - "traefik.http.middlewares.jwt-auth.forwardauth.address=http://auth-service:8082/auth/validate"
      - "traefik.http.middlewares.jwt-auth.forwardauth.authRequestHeaders=Authorization, X-Forwarded-Uri"
      - "traefik.http.middlewares.jwt-auth.forwardauth.trustforwardheader=true"

  auth-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    networks:
      - backend
    volumes:
      - ./databases/auth/pgdata:/var/lib/postgresql/data
      - ./databases/scripts/auth_init.sql:/docker-entrypoint-initdb.d/initdb.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=auth_db --username=postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  inventory-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    networks:
      - backend
    volumes:
      - ./databases/inventory/pgdata:/var/lib/postgresql/data
      - ./databases/scripts/inventory_init.sql:/docker-entrypoint-initdb.d/initdb.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=inventory_db --username=postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  payment-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: payment_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    networks:
      - backend
    volumes:
      - ./databases/payment/pgdata:/var/lib/postgresql/data
      - ./databases/scripts/payment_init.sql:/docker-entrypoint-initdb.d/initdb.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=payment_db --username=postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  order-postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    networks:
      - backend
    volumes:
      - ./databases/order/pgdata:/var/lib/postgresql/data
      - ./databases/scripts/order_init.sql:/docker-entrypoint-initdb.d/initdb.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=order_db --username=postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_DEFAULT_BUCKETS: image_bucket
    command: server --address ':9000' --console-address ':9001' /data
    ports:
      - '9000:9000'   # API
      - '9001:9001'   # Console
    volumes:
      - ./minio/data:/data
      - ./minio/config:/root/.minio
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://minio:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
        - backend

volumes:
    portainer_data:

networks:
  backend:
    driver: bridge



